####################################################################################################
# SHORTCOMING IN TESTS
####################################################################################################
# TODO: open PRs
#
# built-ins/Temporal/Duration/compare/argument-duration-out-of-range.js (line ~65)
# ::compare not given relativeTo, so will throw RangeError even if behavior not implemented
#
# built-ins/Temporal/PlainDate/prototype/since/wrapping-at-end-of-month.js (line ~92)
# "Dec 30th 1970 to Apr 30th 1973 is 27 months, 30 days, not 28 months" // typo! Dec 31st

####################################################################################################
# TEST262 FORK NOTES
####################################################################################################
#
# Fork: https://github.com/fullcalendar/test262
# `main` is an integration of:
#   - "Tests for correct intermediate value in ZonedDateTime difference/rounding"
#     https://github.com/tc39/test262/pull/4012
#     (for https://github.com/tc39/proposal-temporal/pull/2760)
#   - https://github.com/fullcalendar/test262/tree/fewer-calls-offset-prefer-reject
#   - https://github.com/fullcalendar/test262/tree/fewer-calls-rel-rounding
#   - https://github.com/fullcalendar/test262/tree/fewer-calls-zdt-time-rounding

####################################################################################################
# SPEC BUGS
####################################################################################################

# SPEC-BUG
# "Fix Duration rounding relative to ZonedDateTime"
# (refactors Duration::round/total to be more DRY with since/until)
# Reported: https://github.com/tc39/proposal-temporal/issues/2742
# Bugfix PR: https://github.com/tc39/proposal-temporal/pull/2758
#
# The following will start passing once PR is merged...
#
built-ins/Temporal/Duration/prototype/round/dst-rounding-result.js
built-ins/Temporal/Duration/prototype/total/dst-rounding-result.js
intl402/Temporal/Duration/prototype/round/relativeto-string-datetime.js
built-ins/Temporal/Duration/prototype/round/timezone-getpossibleinstantsfor-iterable.js
built-ins/Temporal/Duration/prototype/total/precision-exact-mathematical-values-4.js
#
# The mock doesn't expect consecutive calls to getPossibleInstantsFor,
# which the new Duration::round/total algorithm has
built-ins/Temporal/Duration/prototype/total/precision-exact-mathematical-values-3.js
#
# When Duration::round() stops using NormalizedTimeDurationToDays, because of consolidation,
# consecutive conflicting calls to getPossibleInstantsFor won't be policed in the same way
built-ins/Temporal/Duration/prototype/round/throws-in-balance-duration-when-sign-mismatched-with-zoned-date-time.js
built-ins/Temporal/Duration/prototype/round/zero-day-length.js
built-ins/Temporal/Duration/prototype/total/zero-day-length.js
built-ins/Temporal/Duration/prototype/round/relativeto-zoneddatetime-normalized-time-duration-to-days-range-errors.js
built-ins/Temporal/Duration/prototype/total/relativeto-zoneddatetime-normalized-time-duration-to-days-range-errors.js
built-ins/Temporal/Duration/prototype/round/date-and-time-durations-opposite-signs.js
built-ins/Temporal/Duration/prototype/round/normalized-time-duration-to-days-loop-arbitrarily.js
#
# Above PR also refactors other diffing, and cuts out certain uses of NormalizedTimeDurationToDays,
# which changes how consecutive conflicting calls to getPossibleInstantsFor are policed
built-ins/Temporal/ZonedDateTime/prototype/since/normalized-time-duration-to-days-loop-arbitrarily.js
built-ins/Temporal/ZonedDateTime/prototype/until/normalized-time-duration-to-days-loop-arbitrarily.js
built-ins/Temporal/ZonedDateTime/prototype/since/normalized-time-duration-to-days-range-errors.js
built-ins/Temporal/ZonedDateTime/prototype/until/normalized-time-duration-to-days-range-errors.js

# SPEC-BUG (TODO: create ticket)
# Our onion-shell rounding algorithm results in fewer calls to dateAdd/dateUntil.
# One likely reason: we short-circuit if the direction of rounding is not outward.
#
# Ref polyfill seems to retread a lot of ground:
# RoundDuration + (BalanceTimeDuration/AdjustRoundedDurationDays) + BalanceDateDurationRelative
#
# Updates in tests
# https://github.com/tc39/test262/compare/main...fullcalendar:test262:fewer-calls-rel-rounding?expand=1
###built-ins/Temporal/PlainDateTime/prototype/since/order-of-operations.js
###built-ins/Temporal/PlainDateTime/prototype/until/order-of-operations.js
###built-ins/Temporal/Duration/prototype/round/calendar-dateadd-called-with-options-undefined.js
###built-ins/Temporal/ZonedDateTime/prototype/since/calendar-dateuntil-called-with-singular-largestunit.js
###built-ins/Temporal/ZonedDateTime/prototype/until/calendar-dateuntil-called-with-singular-largestunit.js
###built-ins/Temporal/Duration/prototype/round/calendar-dateuntil-called-with-singular-largestunit.js
###built-ins/Temporal/ZonedDateTime/prototype/since/calendar-dateadd-called-with-options-undefined.js
###built-ins/Temporal/ZonedDateTime/prototype/until/calendar-dateadd-called-with-options-undefined.js
###built-ins/Temporal/Duration/prototype/round/dateuntil-field.js
###built-ins/Temporal/PlainDate/prototype/until/order-of-operations.js
###built-ins/Temporal/PlainDate/prototype/since/order-of-operations.js
#
# kill these tests
# (they police conflicting consecutive calls to dateUntil, but there's only 1 now)
built-ins/Temporal/ZonedDateTime/prototype/since/date-and-time-durations-opposite-signs.js
built-ins/Temporal/ZonedDateTime/prototype/until/date-and-time-durations-opposite-signs.js

# Combination of problems
# Best to triage these after other PRs merged
built-ins/Temporal/ZonedDateTime/prototype/since/order-of-operations.js
built-ins/Temporal/ZonedDateTime/prototype/until/order-of-operations.js

# SPEC-BUG (TODO: create ticket)
# Best to report this after #2758 is merged. Too much feedback on top of feedback.
#
# CalendarRecord's dateAdd/(dateUntil?) methods are plucked but never used because
# are (unit<=day && relativeTo:PlainDateTime) || (unit<day && relativeTo:ZonedDateTime)
# Just don't pluck it.
#
# (may also be in combo with "Our onion-shell balancing algorithm...")
built-ins/Temporal/Duration/prototype/add/order-of-operations.js
built-ins/Temporal/Duration/prototype/subtract/order-of-operations.js
built-ins/Temporal/Duration/prototype/round/order-of-operations.js
built-ins/Temporal/Duration/prototype/total/order-of-operations.js

# SPEC-BUG (https://github.com/tc39/proposal-temporal/issues/2790)
# It's not necessary to compute hours-in-day when rounding time parts.
# (hours-in-day needs 2 extra getPossibleInstantsFor calls)
built-ins/Temporal/ZonedDateTime/prototype/round/timezone-getpossibleinstantsfor-iterable.js
built-ins/Temporal/ZonedDateTime/prototype/round/getpossibleinstantsfor-called-with-iso8601-calendar.js
built-ins/Temporal/ZonedDateTime/prototype/round/div-zero.js
built-ins/Temporal/ZonedDateTime/prototype/round/getoffsetnanosecondsfor-maximum-forward-offset-shift.js
built-ins/Temporal/ZonedDateTime/prototype/round/getoffsetnanosecondsfor-out-of-range-forward-offset-shift.js
#
# Updated in tests (WIP)
# https://github.com/tc39/test262/compare/main...fullcalendar:test262:fewer-calls-zdt-time-rounding?expand=1
###built-ins/Temporal/ZonedDateTime/prototype/round/order-of-operations.js

# SPEC-BUG (https://github.com/tc39/proposal-temporal/pull/2789)
# Instant disambiguation with refer/reject of multiple results from
# getPossibleInstantsFor() can avoid a call to getOffsetNanosecondsFor
# by deriving each candidate's offset by comparing it to the UTC-zoned y/m/d/etc
#
# Updated in tests
# https://github.com/tc39/test262/compare/main...fullcalendar:test262:fewer-calls-offset-prefer-reject?expand=1
###built-ins/Temporal/ZonedDateTime/from/order-of-operations.js
###built-ins/Temporal/ZonedDateTime/compare/order-of-operations.js
###built-ins/Temporal/ZonedDateTime/prototype/equals/order-of-operations.js
###built-ins/Temporal/ZonedDateTime/from/argument-propertybag-ambiguous-wall-clock-time.js

# SPEC-BUG (https://github.com/tc39/proposal-temporal/issues/2788)
# A ZonedDateTime should only need to call its timeZone's getOffsetNanosecondsFor
# once during its existence and then cache the resulting ISO values.
built-ins/Temporal/ZonedDateTime/prototype/withPlainDate/order-of-operations.js

# TODO: review and report our algorithms that are more efficient than ref polyfill
# - native-internal YMD diffing
#   - ours doesn't use loops. faster?
#   - ours is generalized for ISO and Intl. smaller code size
# - code smell in ref polyfill
#   - NanosecondsToDays
#   - NormalizedTimeDurationToDays
#   - UnbalanceDateDurationRelative
#     (in #2758, no longer used for Duration::round/total, just for Duration::compare)

####################################################################################################
# PRECISION
####################################################################################################

# PRECISION
# We do not "perform long division to calculate the fractional part of the quotient
# remainder / n with more accuracy than 64-bit floating point division" because we don't
# use bigint, and even if we did, it's overly tedious to do string manipulation to simulate this
built-ins/Temporal/Duration/prototype/total/precision-exact-mathematical-values-6.js

# PRECISION (TimeZone subclass/protocol only)
# we don't support hours-in-day greater than 10000000xxx (line 119 in the test),
# which can happen if 1-day-apart TimeZone::getPossibleInstantsFor calls give results wildly apart.
# results in slightly-less-precise-than-desirable (already ridiculous) .hoursInDay values
# this happens because we don't leverage bigint for such normally-simple operations
built-ins/Temporal/ZonedDateTime/prototype/hoursInDay/precision-exact-mathematical-values.js
#
# similar, but with floating point imprecision
built-ins/Temporal/ZonedDateTime/prototype/hoursInDay/precision-exact-mathematical-values-2.js

####################################################################################################
# ACCESSING OBJECTS AS BAGS
####################################################################################################

# CALLING
# for converting from ZonedDateTime -> PlainYearMonth, Calendar::year/monthCode is supposed to be queried.
# for converting from ZonedDateTime -> PlainMonthDay, Calendar::monthCode/day is supposed to be queried.
# Instead, we treat the incoming ZonedDateTime as a bag and access these parts as normal properties.
# Better for code compactness.
# (Same shortcoming for PlainDateTime but those tests are not written)
built-ins/Temporal/ZonedDateTime/prototype/toPlainMonthDay/order-of-operations.js
built-ins/Temporal/ZonedDateTime/prototype/toPlainYearMonth/order-of-operations.js

# CALLING
# ZonedDateTime::with accesses its own props as a bag (`initialFields`) and thus
# creates a TimeZone record when it shouldn't
built-ins/Temporal/ZonedDateTime/prototype/with/order-of-operations.js

# CALLING
# PlainDateTime::with is supposed to access time parts via internal slots.
# We treat the current PlainDateTime as a bag and access the time parts as normal properties,
# Better for code compactness.
built-ins/Temporal/PlainDateTime/prototype/with/order-of-operations.js

####################################################################################################
# MISC NON-COMPLIANT ACCESS (slightly different algos for code size)
####################################################################################################

# CALLING (TODO: FIX!)
#
# Duration::compare, two problems:
# 1. Our marker system converts ZonedDateTime->PlainDateTime very frequently
#    for calendar date-adding. The ref polyfill precomputes the PlainDateTime.
# 2. We have "HACK" around plucking calendarOps in compareDurations.
#    Not good for tree-shaking in func API.
#
# (also a mixture of #2789 and "CalendarRecord's dateAdd method is plucked")
# (unique problems start happening line 260 onwards)
built-ins/Temporal/Duration/compare/order-of-operations.js

# CALLING
# In the spec, `AddDuration` adds dur0 y/m/w/d, then dur1 y/m/w/d, then combines and adds time parts.
# Our version uses two `moveDateTime` calls for better code reuse, which results in:
#   +dur0.timeparts +dur0.ymwd +dur1.timeparts +dur1.ymwd
# Same ultimate results but different calls to Calendar::dateAdd w/ different intermediate durations.
built-ins/Temporal/Duration/prototype/subtract/calendar-dateadd.js

# CALLING
# PlainYearMonth operations break spec because we don't convert to raw fields and then back
# to PlainYearMonth. We leverage Calendar::day instead
built-ins/Temporal/PlainYearMonth/prototype/since/calendar-datefromfields-called-with-options-undefined.js
built-ins/Temporal/PlainYearMonth/prototype/since/calendar-fields-iterable.js
built-ins/Temporal/PlainYearMonth/prototype/since/calendar-fromfields-called-with-null-prototype-fields.js
built-ins/Temporal/PlainYearMonth/prototype/since/order-of-operations.js
built-ins/Temporal/PlainYearMonth/prototype/until/calendar-datefromfields-called-with-options-undefined.js
built-ins/Temporal/PlainYearMonth/prototype/until/calendar-fields-iterable.js
built-ins/Temporal/PlainYearMonth/prototype/until/calendar-fromfields-called-with-null-prototype-fields.js
built-ins/Temporal/PlainYearMonth/prototype/until/order-of-operations.js
built-ins/Temporal/PlainYearMonth/prototype/add/order-of-operations.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/order-of-operations.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-datefromfields-called.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-fromfields-called-with-null-prototype-fields.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-yearmonthfromfields-called-with-null-prototype-options.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-datefromfields-called.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-fromfields-called-with-null-prototype-fields.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-yearmonthfromfields-called-with-null-prototype-options.js
built-ins/Temporal/PlainYearMonth/prototype/add/end-of-month-out-of-range.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/end-of-month-out-of-range.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-fields-iterable.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-fields-iterable.js
built-ins/Temporal/PlainYearMonth/prototype/add/constructor-in-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/add/duplicate-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/add/proto-in-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/constructor-in-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/duplicate-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/proto-in-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-arguments.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-arguments.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-arguments-extra-options.js
built-ins/Temporal/PlainYearMonth/prototype/add/overflow-wrong-type.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-arguments-extra-options.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/overflow-wrong-type.js

####################################################################################################
# OBJECTS GIVEN TO PROTOCOLS
####################################################################################################

# CALLING
# getPossibleInstantsFor wants plainDateTimes that sometimes have calendar. instead, always give iso
built-ins/Temporal/PlainDate/prototype/toZonedDateTime/timezone-getpossibleinstantsfor.js

# CALLING
# when ZonedDateTime needs to query Calendar, should give PlainDateTime instead of PlainDate
built-ins/Temporal/ZonedDateTime/prototype/day/custom.js
built-ins/Temporal/ZonedDateTime/prototype/dayOfWeek/custom.js
built-ins/Temporal/ZonedDateTime/prototype/dayOfYear/custom.js
built-ins/Temporal/ZonedDateTime/prototype/daysInMonth/custom.js
built-ins/Temporal/ZonedDateTime/prototype/daysInWeek/custom.js
built-ins/Temporal/ZonedDateTime/prototype/daysInYear/custom.js
built-ins/Temporal/ZonedDateTime/prototype/inLeapYear/custom.js
built-ins/Temporal/ZonedDateTime/prototype/month/custom.js
built-ins/Temporal/ZonedDateTime/prototype/monthCode/custom.js
built-ins/Temporal/ZonedDateTime/prototype/monthsInYear/custom.js
built-ins/Temporal/ZonedDateTime/prototype/year/custom.js
built-ins/Temporal/ZonedDateTime/prototype/yearOfWeek/custom.js

# CALLING
# problem with our adapter needing specific instance of Temporal object
built-ins/Temporal/Duration/compare/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/PlainDate/prototype/add/custom.js
built-ins/Temporal/PlainDate/prototype/day/custom.js
built-ins/Temporal/PlainDate/prototype/dayOfWeek/custom.js
built-ins/Temporal/PlainDate/prototype/dayOfYear/custom.js
built-ins/Temporal/PlainDate/prototype/daysInMonth/custom.js
built-ins/Temporal/PlainDate/prototype/daysInWeek/custom.js
built-ins/Temporal/PlainDate/prototype/daysInYear/custom.js
built-ins/Temporal/PlainDate/prototype/inLeapYear/custom.js
built-ins/Temporal/PlainDate/prototype/month/custom.js
built-ins/Temporal/PlainDate/prototype/monthCode/custom.js
built-ins/Temporal/PlainDate/prototype/monthsInYear/custom.js
built-ins/Temporal/PlainDate/prototype/since/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/PlainDate/prototype/subtract/custom.js
built-ins/Temporal/PlainDate/prototype/since/custom.js
built-ins/Temporal/PlainDate/prototype/until/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/PlainDate/prototype/until/custom.js
built-ins/Temporal/PlainDate/prototype/weekOfYear/custom.js
built-ins/Temporal/PlainDate/prototype/with/custom.js
built-ins/Temporal/PlainDate/prototype/year/custom.js
built-ins/Temporal/PlainDate/prototype/yearOfWeek/custom.js
built-ins/Temporal/PlainDateTime/prototype/day/custom.js
built-ins/Temporal/PlainDateTime/prototype/dayOfWeek/custom.js
built-ins/Temporal/PlainDateTime/prototype/dayOfYear/custom.js
built-ins/Temporal/PlainDateTime/prototype/daysInMonth/custom.js
built-ins/Temporal/PlainDateTime/prototype/daysInWeek/custom.js
built-ins/Temporal/PlainDateTime/prototype/daysInYear/custom.js
built-ins/Temporal/PlainDateTime/prototype/inLeapYear/custom.js
built-ins/Temporal/PlainDateTime/prototype/month/custom.js
built-ins/Temporal/PlainDateTime/prototype/monthCode/custom.js
built-ins/Temporal/PlainDateTime/prototype/monthsInYear/custom.js
built-ins/Temporal/PlainDateTime/prototype/toZonedDateTime/plain-custom-timezone.js
built-ins/Temporal/PlainDateTime/prototype/weekOfYear/custom.js
built-ins/Temporal/PlainDateTime/prototype/year/custom.js
built-ins/Temporal/PlainDateTime/prototype/yearOfWeek/custom.js
built-ins/Temporal/ZonedDateTime/prototype/weekOfYear/custom.js
built-ins/Temporal/PlainYearMonth/prototype/daysInMonth/custom.js
built-ins/Temporal/PlainYearMonth/prototype/daysInYear/custom.js
built-ins/Temporal/PlainYearMonth/prototype/inLeapYear/custom.js
built-ins/Temporal/PlainYearMonth/prototype/month/custom.js
built-ins/Temporal/PlainYearMonth/prototype/monthCode/custom.js
built-ins/Temporal/PlainYearMonth/prototype/monthsInYear/custom.js
built-ins/Temporal/PlainYearMonth/prototype/year/custom.js
built-ins/Temporal/PlainMonthDay/prototype/day/custom.js
built-ins/Temporal/PlainMonthDay/prototype/monthCode/custom.js
built-ins/Temporal/TimeZone/prototype/getPlainDateTimeFor/custom-timezone.js
built-ins/Temporal/Duration/prototype/add/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/Duration/prototype/subtract/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/Duration/prototype/total/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/Duration/prototype/round/calendar-dateadd-called-with-plaindate-instance.js

####################################################################################################
# Intl
####################################################################################################
# NOTE: more in expected-failures-node-gte16.txt

# NOT-IMPLEMENTED
# TimeZone ID canonicalization for Intl.DateTimeFormat
# Polyfilling this is hard for format/formatToParts. The reference-polyfill doesn't even do it.
# The reference-polyfill DOES polyfill resolveOptions (used by tests below), but that will result
# in inconsistent results with format/formatToParts, so best not to polyfill either.
intl402/DateTimeFormat/timezone-case-insensitive.js
intl402/DateTimeFormat/timezone-not-canonicalized.js

# NOT-IMPLEMENTED
# Intl.DateTimeFormat does not accept numeric-offset `timeZones`s and we are okay with that
intl402/DateTimeFormat/prototype/format/offset-timezone-gmt-same.js
intl402/DateTimeFormat/prototype/formatToParts/offset-timezone-correct.js
intl402/DateTimeFormat/prototype/resolvedOptions/offset-timezone-basic.js
intl402/DateTimeFormat/prototype/resolvedOptions/offset-timezone-change.js
