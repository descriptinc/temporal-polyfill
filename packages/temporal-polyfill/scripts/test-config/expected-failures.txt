
####################################################################################################
# Duration
####################################################################################################

# SPEC-BUG
# Duration::round wrong with zdt relativeTo
# https://github.com/tc39/proposal-temporal/issues/2742
intl402/Temporal/Duration/prototype/round/relativeto-string-datetime.js
built-ins/Temporal/Duration/prototype/round/timezone-getpossibleinstantsfor-iterable.js

# PRECISION
# Duration::toString... we display super large duration units as Number would, not BigInt
built-ins/Temporal/Duration/prototype/toString/precision-exact-mathematical-values.js
built-ins/Temporal/Duration/prototype/toString/precision-formatted-as-decimal-number.js

####################################################################################################
# ZonedDateTime
####################################################################################################

# CALLING
# for converting from ZonedDateTime -> PlainYearMonth, Calendar::year/monthCode is supposed to be queried.
# for converting from ZonedDateTime -> PlainMonthDay, Calendar::monthCode/day is supposed to be queried.
# Instead, we treat the incoming ZonedDateTime as a bag and access these parts as normal properties.
# Better for code compactness.
# (Same shortcoming for PlainDateTime but those tests are not written)
built-ins/Temporal/ZonedDateTime/prototype/toPlainMonthDay/order-of-operations.js
built-ins/Temporal/ZonedDateTime/prototype/toPlainYearMonth/order-of-operations.js

####################################################################################################
# PlainDateTime
####################################################################################################

# CALLING
# PlainDateTime::with is supposed to access time parts via internal slots.
# We treat the current PlainDateTime as a bag and access the time parts as normal properties,
# Better for code compactness.
built-ins/Temporal/PlainDateTime/prototype/with/order-of-operations.js

####################################################################################################
# Calendar
####################################################################################################

# SPEC-BUG
# CalendarRecord's dateAdd method is plucked but never used because all units are <=day
# just don't pluck it. file bug?
built-ins/Temporal/Duration/compare/order-of-operations.js
built-ins/Temporal/Duration/prototype/round/order-of-operations.js
built-ins/Temporal/Duration/prototype/total/order-of-operations.js

# CALLING
# Our onion-shell balancing algorithm results in fewer calls to dateAdd/dateUntil.
# We do not do UnbalanceDateDurationRelative+BalanceDateDurationRelative
built-ins/Temporal/PlainDateTime/prototype/since/order-of-operations.js
built-ins/Temporal/PlainDateTime/prototype/until/order-of-operations.js
built-ins/Temporal/Duration/prototype/add/calendar-dateadd-called-with-options-undefined.js
built-ins/Temporal/Duration/prototype/round/calendar-dateadd-called-with-options-undefined.js
built-ins/Temporal/Duration/prototype/subtract/calendar-dateadd-called-with-options-undefined.js
built-ins/Temporal/ZonedDateTime/prototype/since/calendar-dateuntil-called-with-singular-largestunit.js
built-ins/Temporal/ZonedDateTime/prototype/until/calendar-dateuntil-called-with-singular-largestunit.js
built-ins/Temporal/Duration/prototype/round/calendar-dateuntil-called-with-singular-largestunit.js
built-ins/Temporal/ZonedDateTime/prototype/since/calendar-dateadd-called-with-options-undefined.js
built-ins/Temporal/ZonedDateTime/prototype/until/calendar-dateadd-called-with-options-undefined.js
built-ins/Temporal/Duration/prototype/round/dateuntil-field.js
built-ins/Temporal/PlainDate/prototype/until/order-of-operations.js
built-ins/Temporal/PlainDate/prototype/since/order-of-operations.js

# CALLING
# Combination of above: "CalendarRecord's dateAdd method is plucked" and "Our onion-shell balancing algorithm"
built-ins/Temporal/Duration/prototype/add/order-of-operations.js
built-ins/Temporal/Duration/prototype/subtract/order-of-operations.js

# CALLING
# In the spec, `AddDuration` adds dur0 y/m/w/d, then dur1 y/m/w/d, then combines and adds time parts.
# Our version uses two `moveDateTime` calls for better code reuse, which results in:
#   +dur0.timeparts +dur0.ymwd +dur1.timeparts +dur1.ymwd
# Same ultimate results but different calls to Calendar::dateAdd w/ different intermediate durations.
built-ins/Temporal/Duration/prototype/subtract/calendar-dateadd.js

# CALLING
# PlainYearMonth operations break spec because we don't convert to raw fields and then back
# to PlainYearMonth. We leverage Calendar::day instead
built-ins/Temporal/PlainYearMonth/prototype/since/calendar-datefromfields-called-with-options-undefined.js
built-ins/Temporal/PlainYearMonth/prototype/since/calendar-fields-iterable.js
built-ins/Temporal/PlainYearMonth/prototype/since/calendar-fromfields-called-with-null-prototype-fields.js
built-ins/Temporal/PlainYearMonth/prototype/since/order-of-operations.js
built-ins/Temporal/PlainYearMonth/prototype/until/calendar-datefromfields-called-with-options-undefined.js
built-ins/Temporal/PlainYearMonth/prototype/until/calendar-fields-iterable.js
built-ins/Temporal/PlainYearMonth/prototype/until/calendar-fromfields-called-with-null-prototype-fields.js
built-ins/Temporal/PlainYearMonth/prototype/until/order-of-operations.js
built-ins/Temporal/PlainYearMonth/prototype/add/order-of-operations.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/order-of-operations.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-datefromfields-called.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-fromfields-called-with-null-prototype-fields.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-yearmonthfromfields-called-with-null-prototype-options.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-datefromfields-called.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-fromfields-called-with-null-prototype-fields.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-yearmonthfromfields-called-with-null-prototype-options.js
built-ins/Temporal/PlainYearMonth/prototype/add/end-of-month-out-of-range.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/end-of-month-out-of-range.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-fields-iterable.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-fields-iterable.js
built-ins/Temporal/PlainYearMonth/prototype/add/constructor-in-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/add/duplicate-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/add/proto-in-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/constructor-in-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/duplicate-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/proto-in-calendar-fields.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-arguments.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-arguments.js
built-ins/Temporal/PlainYearMonth/prototype/add/calendar-arguments-extra-options.js
built-ins/Temporal/PlainYearMonth/prototype/add/overflow-wrong-type.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/calendar-arguments-extra-options.js
built-ins/Temporal/PlainYearMonth/prototype/subtract/overflow-wrong-type.js

# CALLING
# when ZonedDateTime needs to query Calendar, should give PlainDateTime instead of PlainDate
built-ins/Temporal/ZonedDateTime/prototype/day/custom.js
built-ins/Temporal/ZonedDateTime/prototype/dayOfWeek/custom.js
built-ins/Temporal/ZonedDateTime/prototype/dayOfYear/custom.js
built-ins/Temporal/ZonedDateTime/prototype/daysInMonth/custom.js
built-ins/Temporal/ZonedDateTime/prototype/daysInWeek/custom.js
built-ins/Temporal/ZonedDateTime/prototype/daysInYear/custom.js
built-ins/Temporal/ZonedDateTime/prototype/inLeapYear/custom.js
built-ins/Temporal/ZonedDateTime/prototype/month/custom.js
built-ins/Temporal/ZonedDateTime/prototype/monthCode/custom.js
built-ins/Temporal/ZonedDateTime/prototype/monthsInYear/custom.js
built-ins/Temporal/ZonedDateTime/prototype/year/custom.js
built-ins/Temporal/ZonedDateTime/prototype/yearOfWeek/custom.js

# CALLING
# problem with our adapter needing specific instance of Temporal object
built-ins/Temporal/Duration/compare/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/PlainDate/prototype/add/custom.js
built-ins/Temporal/PlainDate/prototype/day/custom.js
built-ins/Temporal/PlainDate/prototype/dayOfWeek/custom.js
built-ins/Temporal/PlainDate/prototype/dayOfYear/custom.js
built-ins/Temporal/PlainDate/prototype/daysInMonth/custom.js
built-ins/Temporal/PlainDate/prototype/daysInWeek/custom.js
built-ins/Temporal/PlainDate/prototype/daysInYear/custom.js
built-ins/Temporal/PlainDate/prototype/inLeapYear/custom.js
built-ins/Temporal/PlainDate/prototype/month/custom.js
built-ins/Temporal/PlainDate/prototype/monthCode/custom.js
built-ins/Temporal/PlainDate/prototype/monthsInYear/custom.js
built-ins/Temporal/PlainDate/prototype/since/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/PlainDate/prototype/subtract/custom.js
built-ins/Temporal/PlainDate/prototype/since/custom.js
built-ins/Temporal/PlainDate/prototype/until/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/PlainDate/prototype/until/custom.js
built-ins/Temporal/PlainDate/prototype/weekOfYear/custom.js
built-ins/Temporal/PlainDate/prototype/with/custom.js
built-ins/Temporal/PlainDate/prototype/year/custom.js
built-ins/Temporal/PlainDate/prototype/yearOfWeek/custom.js
built-ins/Temporal/PlainDateTime/prototype/day/custom.js
built-ins/Temporal/PlainDateTime/prototype/dayOfWeek/custom.js
built-ins/Temporal/PlainDateTime/prototype/dayOfYear/custom.js
built-ins/Temporal/PlainDateTime/prototype/daysInMonth/custom.js
built-ins/Temporal/PlainDateTime/prototype/daysInWeek/custom.js
built-ins/Temporal/PlainDateTime/prototype/daysInYear/custom.js
built-ins/Temporal/PlainDateTime/prototype/inLeapYear/custom.js
built-ins/Temporal/PlainDateTime/prototype/month/custom.js
built-ins/Temporal/PlainDateTime/prototype/monthCode/custom.js
built-ins/Temporal/PlainDateTime/prototype/monthsInYear/custom.js
built-ins/Temporal/PlainDateTime/prototype/toZonedDateTime/plain-custom-timezone.js
built-ins/Temporal/PlainDateTime/prototype/weekOfYear/custom.js
built-ins/Temporal/PlainDateTime/prototype/year/custom.js
built-ins/Temporal/PlainDateTime/prototype/yearOfWeek/custom.js
built-ins/Temporal/ZonedDateTime/prototype/weekOfYear/custom.js
built-ins/Temporal/PlainYearMonth/prototype/daysInMonth/custom.js
built-ins/Temporal/PlainYearMonth/prototype/daysInYear/custom.js
built-ins/Temporal/PlainYearMonth/prototype/inLeapYear/custom.js
built-ins/Temporal/PlainYearMonth/prototype/month/custom.js
built-ins/Temporal/PlainYearMonth/prototype/monthCode/custom.js
built-ins/Temporal/PlainYearMonth/prototype/monthsInYear/custom.js
built-ins/Temporal/PlainYearMonth/prototype/year/custom.js
built-ins/Temporal/PlainMonthDay/prototype/day/custom.js
built-ins/Temporal/PlainMonthDay/prototype/monthCode/custom.js
built-ins/Temporal/TimeZone/prototype/getPlainDateTimeFor/custom-timezone.js
built-ins/Temporal/Duration/prototype/add/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/Duration/prototype/subtract/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/Duration/prototype/total/calendar-dateadd-called-with-plaindate-instance.js
built-ins/Temporal/Duration/prototype/round/calendar-dateadd-called-with-plaindate-instance.js

####################################################################################################
# TimeZone
####################################################################################################

# SPEC-BUG
# It's not necessary to compute hours-in-day when rounding time parts. File bug?
# (hours-in-day needs 2 extra getPossibleInstantsFor calls)
built-ins/Temporal/ZonedDateTime/prototype/round/timezone-getpossibleinstantsfor-iterable.js
built-ins/Temporal/ZonedDateTime/prototype/round/getpossibleinstantsfor-called-with-iso8601-calendar.js
built-ins/Temporal/ZonedDateTime/prototype/round/div-zero.js

# PRECISION (TimeZone subclass/protocol only)
# we don't support hours-in-day greater than 10000000xxx (line 119 in the test),
# which can happen if 1-day-apart TimeZone::getPossibleInstantsFor calls give results wildly apart.
# results in slightly-less-precise-than-desirable (already ridiculous) .hoursInDay values
# this happens because we don't leverage bigint for such normally-simple operations
built-ins/Temporal/ZonedDateTime/prototype/hoursInDay/precision-exact-mathematical-values.js

# CALLING
# Moving/Diffing/Rounding with ZonedDateTimes
# For balancing-up time parts to higher units, the spec uses NanosecondsToDays,
# which liberally calls TimeZoneProtocol::getOffsetNanosecondsFor and ::getPossibleInstants,
# and has copious sanity-checking around results to guard against malicious TimeZoneProtocols.
# We don't have a separate internal algorithm for balancing. Instead, we add+diff instead, which
# uses a simpler back-off strategy for detecting malicious TimeZoneProtocol results.
built-ins/Temporal/Duration/prototype/round/throws-in-balance-duration-when-sign-mismatched-with-zoned-date-time.js
built-ins/Temporal/Duration/prototype/round/zero-day-length.js
built-ins/Temporal/Duration/prototype/total/zero-day-length.js
built-ins/Temporal/ZonedDateTime/prototype/since/nanoseconds-to-days-range-errors.js
built-ins/Temporal/ZonedDateTime/prototype/until/nanoseconds-to-days-range-errors.js
built-ins/Temporal/Duration/prototype/add/relativeto-zoneddatetime-nanoseconds-to-days-range-errors.js
built-ins/Temporal/Duration/prototype/subtract/relativeto-zoneddatetime-nanoseconds-to-days-range-errors.js
built-ins/Temporal/Duration/prototype/round/relativeto-zoneddatetime-nanoseconds-to-days-range-errors.js
built-ins/Temporal/Duration/prototype/total/relativeto-zoneddatetime-nanoseconds-to-days-range-errors.js
built-ins/Temporal/Duration/prototype/add/nanoseconds-to-days-loop-indefinitely.js
built-ins/Temporal/Duration/prototype/round/nanoseconds-to-days-loop-indefinitely.js
built-ins/Temporal/Duration/prototype/subtract/nanoseconds-to-days-loop-indefinitely.js
built-ins/Temporal/Duration/prototype/total/nanoseconds-to-days-loop-indefinitely.js
built-ins/Temporal/ZonedDateTime/prototype/since/nanoseconds-to-days-loop-indefinitely.js
built-ins/Temporal/ZonedDateTime/prototype/until/nanoseconds-to-days-loop-indefinitely.js
built-ins/Temporal/ZonedDateTime/prototype/since/order-of-operations.js
built-ins/Temporal/ZonedDateTime/prototype/until/order-of-operations.js

# CALLING
# From/With/Round/Compare/Equals uses InterpretISODateTimeOffset which calls
# TimeZoneProtocol::getPossibleInstants many more times than our algorithm, not sure why.
# The below tests might also be experiencing reduced TimeZoneProtocol calls due to the
# NanosecondsToDays issue mentioned above.
built-ins/Temporal/ZonedDateTime/prototype/round/order-of-operations.js
built-ins/Temporal/ZonedDateTime/prototype/with/order-of-operations.js
built-ins/Temporal/ZonedDateTime/from/order-of-operations.js
built-ins/Temporal/ZonedDateTime/compare/order-of-operations.js
built-ins/Temporal/ZonedDateTime/from/order-of-operations.js
built-ins/Temporal/ZonedDateTime/prototype/equals/order-of-operations.js
built-ins/Temporal/ZonedDateTime/from/argument-propertybag-ambiguous-wall-clock-time.js

# CALLING
# our zonedInternalsToIso cache (which converts zdt to iso-fields) avoids a second call to getOffsetNanosecondsFor
built-ins/Temporal/ZonedDateTime/prototype/withPlainDate/order-of-operations.js

# CALLING
# getPossibleInstantsFor wants plainDateTimes that sometimes have calendar. instead, always give iso
built-ins/Temporal/PlainDate/prototype/toZonedDateTime/timezone-getpossibleinstantsfor.js

####################################################################################################
# Intl
####################################################################################################

# TODO: FIX: TimeZone ID canonicalization with TimeZone::equals
intl402/Temporal/TimeZone/prototype/equals/argument-object.js

# NOT-IMPLEMENTED
# TimeZone ID canonicalization for Intl.DateTimeFormat
intl402/DateTimeFormat/timezone-case-insensitive.js
intl402/DateTimeFormat/timezone-not-canonicalized.js

# NOT-IMPLEMENTED
# Intl.DateTimeFormat does not accept numeric-offset `timeZones`s and we are okay with that
intl402/DateTimeFormat/prototype/format/offset-timezone-gmt-same.js
intl402/DateTimeFormat/prototype/formatToParts/offset-timezone-correct.js
intl402/DateTimeFormat/prototype/resolvedOptions/offset-timezone-basic.js
intl402/DateTimeFormat/prototype/resolvedOptions/offset-timezone-change.js
